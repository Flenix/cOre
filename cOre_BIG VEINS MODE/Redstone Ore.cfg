# Configuration file

general {

    "world generation" {
        # if restrictBiomes is true, the ore will only spawn in biomes listed here. A list can be found in the /assets/core/ folder of this mod. 
        # Current setting is just an example as restrictBiomes is off by default.
        S:allowedBiomes <
            ocean
            desert
            forest
         >

        # A list of dimension IDs which this ore can spawn in. 0 is overworld, -1 is Nether and 1 is The End. 
        # Check relevant mod configs for any other IDs.
        I:allowedDimensions <
            0
         >

        # The maximum size of one vein of ore
        I:maxVeinSize=48

        # The highest point of the world an ore can spawn at. Must be below 255.
        I:maxWorldHeight=16

        # The minimum size of one vein of ore
        I:minVeinSize=39

        # The lowest point of the world an ore can spawn at. Must be above 0.
        I:minWorldHeight=1

        # Whether to use the allowed biomes whitelist or just generate in all biomes.
        B:restrictBiomes=false

        # The chance each vein has to actually be generated. As a percentage, so 0-100. 
        # Used for rare ores that should be less than one per chunk.
        I:veinSpawnChance=57

        # How many veins of ore will spawn within a 16x16 area.
        I:veinsPerChunk=1

        # Whether to override vanilla ore generation with this config. 
        # If false, all further generator settings are ignored, and the ore will generate as default. 
        # TIP: if you wanted to disable the ore ENTIRELY, use this config to generate with a vein spawn chance of 0!
        B:worldGenEnabled=true
    }

    drops {
        # Whether Fortune enchantments work on this block 
        # (Increasing the total amounts dropped - does not increase drop chance for secondary.)
        B:canFortune=false

        # Whether Silk Touch enchantments works on this block 
        # (Dropping the block itself, instead of any drops listed above)
        B:canSilkTouch=false

        # Whether the primary drop can drop when mined by a fake player (E.G. a quarry)
        B:dropPrimaryForFakePlayer=true

        # Whether the secondary drop can drop when mined by a fake player
        B:dropSecondaryForFakePlayer=false

        # Whether cOre should override the vanilla drops. Set to false to leave normal vanilla mode when mining vanilla ores.
        B:overrideVanillaDrop=true

        # The odds that the primary drop will occur. As a percentage, so 0-100.
        I:primaryDropChance=100

        # The maximum amount that will drop (cannot be higher than the items maximum stack size - usualy 64)
        I:primaryDropQtyMax=5

        # The minimum amount that will drop (Must be 1 or higher;
        I:primaryDropQtyMin=4

        # The unlocalized name of the item which should be dropped (for example, core:ore_copper or minecraft:dye:4 for Lapis Lazuli)
        S:primaryDroppedItem=minecraft:redstone

        # The odds that the secondary drop will occur. As a percentage, so 0-100.
        I:secondaryDropChance=15

        # The maximum amount of the secondary item that will drop
        I:secondaryDropQtyMax=3

        # The minimum amount of the secondary item that will drop
        I:secondaryDropQtyMin=1

        # The unlocalized name of a secondary item which can be dropped (leave blank to disable)
        S:secondaryDroppedItem=core:dust_tiny_redstone
    }

    "ore dictionary" {
        # The Ore Dictionary name used for tiny dusts (typically dustTinyOrename)
        S:dustTinyOreDict=dustTinyRedstone

        # The Ore Dictionary name used for ingots (typically ingotOrename)
        S:ingotOreDict=ingotRedstone
    }

    properties {
        # Int value of Blue colour used for ore colouring. Must be 0-255 
        # (Mainly used on fluids - may be used elsewhere later.)
        I:colour_b=0

        # Int value of Green colour used for ore colouring. Must be 0-255 
        # (Mainly used on fluids - may be used elsewhere later.)
        I:colour_g=0

        # Int value of Red colour used for ore colouring. Must be 0-255 
        # (Mainly used on fluids - may be used elsewhere later.)
        I:colour_r=255

        # An arbitrary value assigned based on material properties such as malleability and ductility as well as brittleness. This affects any tools made when using cOre directly. 
        # NOTE: that means both tools made directly by cOre, and also any mods which REQUIRE core as a dependency!! (Assuming they use this value, which they should.)
        I:durability=1

        # The melting point of the pure metal, in celcius.
        I:meltingPoint=1535

        # Any additional notes to be displayed in tooltip. Not used by default.
        # Each entry will be displayed on its own line.
        S:notes <
            
         >

        # The chemical symbol for this material. Not always used.
        S:symbol=Rd

        # The weight of this metal in purified form, per cubic meter. For real metals this is accurate so probably doesn't need changing but tweak as you see fit.
        I:weight=7874
    }

    recipes {
        # Whether gem dust can be compressed to form a gem
        B:dustCompressingEnabled=true

        # How much energy should the process consume
        I:dustCompressingEnergyUsage=4000

        # The unlocalized name of the output (for example, core:gem_ruby)
        S:dustCompressingOutput=core:ingot_redstone

        # The amount of items that should be produced
        I:dustCompressingOutputAmount=1

        # Whether the impure dust can be smelted into the configured item (usually ingot)
        B:dustImpureSmeltingEnabled=true

        # How much energy should the process consume
        I:dustImpureSmeltingEnergyUsage=5000

        # The unlocalized name of the output (for example, core:ingot_copper)
        S:dustImpureSmeltingOutput=minecraft:redstone

        # The amount of items that should be produced
        I:dustImpureSmeltingOutputAmount=1

        # How much energy should the process consume
        I:ingotCrusherEnergyUsage=2000

        # The unlocalized name of the primary output (for example, core:dust_copper)
        S:ingotCrusherOutput=core:dust_redstone

        # The amount of items that should be produced (For ingots you almost always want 1:1)
        I:ingotCrusherOutputAmount=1

        # Whether this can be crushed in some sort of crushing machine, to produce (by default) dust.
        B:ingotCrushingEnabled=true

        # How much energy should the process consume
        I:oreCrusherEnergyUsage=4000

        # The unlocalized name of the primary output (for example, core:dust_impure_copper)
        S:oreCrusherPrimaryOutput=core:dust_impure_redstone

        # The amount of items that should be produced (Modded Minecraft standard is 2 dust for one ore)
        I:oreCrusherPrimaryOutputAmount=10

        # The unlocalized name of the primary output (for example, core:dust_copper) 
        # Will only be produced if the machine used supports secondary outputs with chance!!
        S:oreCrusherSecondaryOutput=core:dust_tiny_redstone

        # The amount of the secondary output to be produced on successful chance roll
        I:oreCrusherSecondaryOutputAmount=1

        # The chance of producing secondary ore, as a percentage (0-100)
        I:oreCrusherSecondaryOutputChance=15

        # Whether this can be crushed in some sort of crushing machine, to produce (by default) impure dust.
        B:oreCrushingEnabled=true

        # Whether the ore can be smelted into the configured item (usually ingot)
        B:oreSmeltingEnabled=true

        # How much energy should the process consume
        I:oreSmeltingEnergyUsage=4000

        # The unlocalized name of the output (for example, core:ingot_copper)
        S:oreSmeltingOutput=minecraft:redstone

        # The amount of items that should be produced
        I:oreSmeltingOutputAmount=5
    }

}


